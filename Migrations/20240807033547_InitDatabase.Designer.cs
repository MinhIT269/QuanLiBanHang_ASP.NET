// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quan_ly_ban_hang.Models;

#nullable disable

namespace Quan_ly_ban_hang.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240807033547_InitDatabase")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Quan_ly_ban_hang.Models.CartItem", b =>
                {
                    b.Property<Guid>("CartitemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartitemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            CartitemId = new Guid("1f646a35-3e37-457f-a583-e0f80de5ead9"),
                            CartId = new Guid("637c2047-94fa-4d68-b789-043aeec0ed01"),
                            ProductId = new Guid("c28f2b37-61b5-4261-8e90-811ee41d5eda"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("7a02ea32-2549-4601-89b4-1ee44b97778a"),
                            CategoryName = "Default Category",
                            Description = "This is a default category"
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("fecafea9-a3ed-4dc2-b914-b7ccf96ac766"),
                            Address = "123 Customer St.",
                            RegistrationDate = new DateTime(2024, 8, 7, 10, 35, 45, 879, DateTimeKind.Local).AddTicks(747),
                            UserId = new Guid("66ec4ef4-514b-4b40-9af3-e38b47b0915c")
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("bc0d7090-e4ba-49df-8f36-862748d2a98f"),
                            CustomerId = new Guid("fecafea9-a3ed-4dc2-b914-b7ccf96ac766"),
                            OrderDate = new DateTime(2024, 8, 7, 10, 35, 45, 879, DateTimeKind.Local).AddTicks(788),
                            Status = "Pending",
                            TotalAmount = 100.0m
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = new Guid("995f33e8-93ca-4f44-8ed2-dcb8cafbe736"),
                            OrderId = new Guid("bc0d7090-e4ba-49df-8f36-862748d2a98f"),
                            ProductId = new Guid("c28f2b37-61b5-4261-8e90-811ee41d5eda"),
                            Quantity = 1,
                            UnitPrice = 100.0m
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = new Guid("a2bdd209-b7f5-411d-bb34-806bf3022f71"),
                            Amount = 100.0m,
                            OrderId = new Guid("bc0d7090-e4ba-49df-8f36-862748d2a98f"),
                            PaymentDate = new DateTime(2024, 8, 7, 10, 35, 45, 879, DateTimeKind.Local).AddTicks(875),
                            PaymentMethod = "Credit Card"
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("c28f2b37-61b5-4261-8e90-811ee41d5eda"),
                            Description = "This is a default product",
                            Name = "Default Product",
                            Price = 100.0m,
                            Stock = 10
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("c28f2b37-61b5-4261-8e90-811ee41d5eda"),
                            CategoryId = new Guid("7a02ea32-2549-4601-89b4-1ee44b97778a")
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = new Guid("b6c6e5c7-eddb-404b-a23e-d09da3f36038"),
                            Comment = "Great product!",
                            CustomerId = new Guid("fecafea9-a3ed-4dc2-b914-b7ccf96ac766"),
                            ProductId = new Guid("c28f2b37-61b5-4261-8e90-811ee41d5eda"),
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 8, 7, 10, 35, 45, 879, DateTimeKind.Local).AddTicks(850)
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("0acb9a2c-2cd5-4a15-bbe8-7a14155914bc"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("a8430da8-b998-4cfc-b4d5-d47bd5c0e5c3"),
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CardId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            CardId = new Guid("637c2047-94fa-4d68-b789-043aeec0ed01"),
                            CreatedDate = new DateTime(2024, 8, 7, 10, 35, 45, 879, DateTimeKind.Local).AddTicks(904),
                            CustomerId = new Guid("fecafea9-a3ed-4dc2-b914-b7ccf96ac766")
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Nguoi dung");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("78ae5afb-f44b-4fd0-920f-cc6043d145ee"),
                            EmailAddress = "admin1@gmail.com",
                            FullName = "Administrator",
                            Password = "adminpassword",
                            Phone = "0925979999",
                            RoleId = new Guid("0acb9a2c-2cd5-4a15-bbe8-7a14155914bc"),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = new Guid("66ec4ef4-514b-4b40-9af3-e38b47b0915c"),
                            EmailAddress = "customer@gmail.com",
                            FullName = "Nguyen Anh Duc",
                            Password = "customerpassword",
                            Phone = "0987654321",
                            RoleId = new Guid("a8430da8-b998-4cfc-b4d5-d47bd5c0e5c3"),
                            UserName = "customer"
                        });
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.CartItem", b =>
                {
                    b.HasOne("Quan_ly_ban_hang.Models.ShoppingCart", "Shopping_Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quan_ly_ban_hang.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Shopping_Cart");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Customer", b =>
                {
                    b.HasOne("Quan_ly_ban_hang.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Quan_ly_ban_hang.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Order", b =>
                {
                    b.HasOne("Quan_ly_ban_hang.Models.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.OrderDetail", b =>
                {
                    b.HasOne("Quan_ly_ban_hang.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quan_ly_ban_hang.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Payment", b =>
                {
                    b.HasOne("Quan_ly_ban_hang.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Quan_ly_ban_hang.Models.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.ProductCategory", b =>
                {
                    b.HasOne("Quan_ly_ban_hang.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quan_ly_ban_hang.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Review", b =>
                {
                    b.HasOne("Quan_ly_ban_hang.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quan_ly_ban_hang.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.ShoppingCart", b =>
                {
                    b.HasOne("Quan_ly_ban_hang.Models.Customer", "Customer")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("Quan_ly_ban_hang.Models.ShoppingCart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.User", b =>
                {
                    b.HasOne("Quan_ly_ban_hang.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Customer", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("Reviews");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductCategories");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Quan_ly_ban_hang.Models.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
